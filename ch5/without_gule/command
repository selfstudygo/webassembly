emcc without-glue.c -Os -s WASM=1 -s USE_SDL=2 -s SIDE_MODULE=1 -s BINARYEN_ASYNC_COMPILATION=0 -o without-glue.wasm


(module
  (type $t0 (func))
  (type $t1 (func (result i32)))
  (type $t2 (func (param i32)))
  (type $t3 (func (param i32 i32 i32 i32) (result i32)))
  (import "env" "jsClearRect" (func $env.jsClearRect (type $t1)))
  (import "env" "jsFillRect" (func $env.jsFillRect (type $t3)))
  (import "env" "g$rect" (func $env.g$rect (type $t1)))
  (import "env" "g$isRunning" (func $env.g$isRunning (type $t1)))
  (import "env" "__memory_base" (global $env.__memory_base i32))
  (import "env" "memory" (memory $env.memory 0))
  (func $__wasm_apply_relocs (type $t0)
    nop)
  (func $updateRectLocation (type $t0)
    (local $l0 i32) (local $l1 i32) (local $l2 i32)
    block $B0 (result i32)
      global.get $g1
      i32.load
      local.tee $l0
      if $I1
        local.get $l0
        i32.const 205
        i32.ne
        if $I2
          i32.const -1
          i32.const 1
          global.get $g1
          i32.load8_u offset=8
          i32.const 76
          i32.eq
          select
          br $B0
        end
        global.get $g1
        i32.const 76
        i32.store8 offset=8
        i32.const -1
        br $B0
      end
      global.get $g1
      i32.const 82
      i32.store8 offset=8
      i32.const 1
    end
    local.set $l1
    global.get $g1
    local.tee $l2
    local.get $l0
    local.get $l1
    i32.add
    i32.store
    local.get $l2
    local.get $l2
    i32.load offset=4
    local.get $l1
    i32.add
    i32.store offset=4)
  (func $moveRect (type $t0)
    (local $l0 i32)
    call $env.jsClearRect
    drop
    call $updateRectLocation
    global.get $g1
    local.tee $l0
    i32.load
    local.get $l0
    i32.load offset=4
    i32.const 50
    i32.const 50
    call $env.jsFillRect
    drop)
  (func $getIsRunning (type $t1) (result i32)
    global.get $g2
    i32.load8_u)
  (func $setIsRunning (type $t2) (param $p0 i32)
    global.get $g2
    local.get $p0
    i32.store8)
  (func $init (type $t0)
    (local $l0 i32)
    global.get $g1
    local.tee $l0
    i32.const 82
    i32.store8 offset=8
    local.get $l0
    i64.const 0
    i64.store align=4
    i32.const 1
    call $setIsRunning)
  (func $__post_instantiate (type $t0)
    call $env.g$rect
    global.set $g1
    call $env.g$isRunning
    global.set $g2)
  (global $g1 (mut i32) (i32.const 0))
  (global $g2 (mut i32) (i32.const 0))
  (global $rect i32 (i32.const 4))
  (global $isRunning i32 (i32.const 0))
  (global $__dso_handle i32 (i32.const 0))
  (export "__wasm_apply_relocs" (func $__wasm_apply_relocs))
  (export "updateRectLocation" (func $updateRectLocation))
  (export "rect" (global 3))
  (export "moveRect" (func $moveRect))
  (export "getIsRunning" (func $getIsRunning))
  (export "isRunning" (global 4))
  (export "setIsRunning" (func $setIsRunning))
  (export "init" (func $init))
  (export "__dso_handle" (global 5))
  (export "__post_instantiate" (func $__post_instantiate))
  (data $d0 (global.get $env.__memory_base) "\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"))
